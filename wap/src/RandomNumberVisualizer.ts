import { Context, ContextBase } from './ContextBase';
import { tokenId } from './TokenId';
import { randi } from './Random';

class RandomNumberVisualizer extends ContextBase {

    private readonly width = this.canvasWidth - 10;
    private readonly left = (this.canvasWidth - this.width) / 2;
    private readonly right = this.left + this.width;
    private readonly height = ((this.canvasHeight - 5) / 6) - 5;
    private readonly y_i = this.height + 5;
    private readonly y_m = this.y_i + this.height + 5;
    private readonly y_x1 = this.y_m + this.height + 5;
    private readonly y_x2 = this.y_x1 + this.height + 5;
    private readonly y_j1 = this.y_x2 + this.height + 5;
    private readonly y_j2 = this.y_j1 + this.height + 5;


    private readonly i = new Array<number>(this.canvasWidth - 1).fill(0);
    private readonly m = new Array<number>(this.canvasWidth - 1).fill(0);
    private readonly x1 = new Array<number>(this.canvasWidth - 1).fill(0);
    private readonly x2 = new Array<number>(this.canvasWidth - 1).fill(0);
    private readonly j1 = new Array<number>(this.canvasWidth - 1).fill(0);
    private readonly j2 = new Array<number>(this.canvasWidth - 1).fill(0);

    private max_i = 0;
    private max_m = 0;
    private max_x1 = 0;
    private max_x2 = 0;
    private max_j1 = 0;
    private max_j2 = 0;

    private readonly s = this.seed();

    private readonly fi = () => randi(0, this.i.length);
    private readonly fm = this.mulberry32(tokenId);;
    private readonly fx1 = this.xoshiro128ss(0x9E3779B9, 0x243F6A88, 0xB7E15162, tokenId);
    private readonly fx2 = this.xoshiro128ss(this.s[0], this.s[1], this.s[2], this.s[3]);
    private readonly fj1 = this.jsf32(0x9E3779B9, 0x243F6A88, 0xB7E15162, tokenId);
    private readonly fj2 = this.jsf32(this.s[0], this.s[1], this.s[2], this.s[3]);

    private count = 0;

    // private readonly gm = new Array<number>(this.canvasWidth-1).fill(0);
    // private readonly gx = new Array<number>(this.canvasWidth-1).fill(0);
    // private readonly gj = new Array<number>(this.canvasWidth-1).fill(0);
    // private readonly fgm = this.randn_bm(this.fm);
    // private readonly fgx = this.randn_bm(this.fx);
    // private readonly fgj = this.randn_bm(this.fj);
    constructor(context: Context) {
        super(context);
        this.context.font = "bold 12px serif";
    }

    public update(dt: number) {

        this.max_i = Math.max(this.i[this.fi()] += 1, this.max_i);;
        this.max_m = Math.max(this.inc(this.fm(), this.m), this.max_m);
        this.max_x1 = Math.max(this.inc(this.fx1(), this.x1), this.max_x1);
        this.max_x2 = Math.max(this.inc(this.fx2(), this.x2), this.max_x2);
        this.max_j1 = Math.max(this.inc(this.fj1(), this.j1), this.max_j1);
        this.max_j2 = Math.max(this.inc(this.fj2(), this.j2), this.max_j2);

        this.count++;

        this.context.fillStyle = "black";
        this.context.fillRect(0, 0, this.canvasWidth, this.canvasHeight);

        for (let i = 0; i < this.width; ++i) {
            this.line(this.left + i, this.y_i, this.i[i] * this.height / this.max_i);
            this.line(this.left + i, this.y_m, this.m[i] * this.height / this.max_m);
            this.line(this.left + i, this.y_x1, this.x1[i] * this.height / this.max_x1);
            this.line(this.left + i, this.y_x2, this.x2[i] * this.height / this.max_x2);
            this.line(this.left + i, this.y_j1, this.j1[i] * this.height / this.max_j1);
            this.line(this.left + i, this.y_j2, this.j2[i] * this.height / this.max_j2);
        }

        this.context.fillStyle = "white";
        this.context.fillText(this.count.toString(), 5, 17);

    }

    private line(x: number, y: number, l: number) {
        this.context.strokeStyle = "yellow";
        this.context.beginPath();
        this.context.moveTo(x, y);
        this.context.lineTo(x, y - l);
        this.context.stroke();
    }

    private inc(n: number, a: number[]) {
        return a[Math.floor(n * this.width)] += 1;
    }

    private seed() {

        let i = tokenId * 3;
        const s1 = this.byte(i++) << 24 | this.byte(i++) << 16 | this.byte(i++) << 8 | this.byte(i++);
        const s2 = this.byte(i++) << 24 | this.byte(i++) << 16 | this.byte(i++) << 8 | this.byte(i++);
        const s3 = this.byte(i++) << 24 | this.byte(i++) << 16 | this.byte(i++) << 8 | this.byte(i++);
        const s4 = this.byte(i++) << 24 | this.byte(i++) << 16 | this.byte(i++) << 8 | this.byte(i++);

        console.log("seed", s1, s2, s4, s4);
        return [s1, s2, s3, s4];

    }

    private byte(i: number) {
        return RandomNumberVisualizer.RANDOM_BYTES[i % RandomNumberVisualizer.RANDOM_BYTES.length];
    }

    mulberry32(a: number) {
        return function () {
            var t = a += 0x6D2B79F5;
            t = Math.imul(t ^ t >>> 15, t | 1);
            t ^= t + Math.imul(t ^ t >>> 7, t | 61);
            return ((t ^ t >>> 14) >>> 0) / 4294967296;
        };
    }

    xoshiro128ss(a: number, b: number, c: number, d: number) {
        return function () {
            var t = b << 9, r = a * 5; r = (r << 7 | r >>> 25) * 9;
            c ^= a; d ^= b;
            b ^= c; a ^= d; c ^= t;
            d = d << 11 | d >>> 21;
            return (r >>> 0) / 4294967296;
        };
    }

    jsf32(a: number, b: number, c: number, d: number) {
        return function () {
            a |= 0; b |= 0; c |= 0; d |= 0;
            var t = a - (b << 27 | b >>> 5) | 0;
            a = b ^ (c << 17 | c >>> 15);
            b = c + d | 0;
            c = d + t | 0;
            d = a + t | 0;
            return (d >>> 0) / 4294967296;
        };
    }

    randn_bm(rand: () => number) {
        var u = 0, v = 0;
        while (u === 0)
            u = rand(); //Converting [0,1) to (0,1)
        while (v === 0)
            v = rand();
        return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
    }

    static readonly RANDOM_BYTES = [
        0xda, 0xf4, 0xbf, 0xd7, 0xf4, 0x36, 0x09, 0xa2, 0x10, 0x75, 0xb9, 0x06, 0x3e, 0xe5, 0x73, 0x0f,
        0xfd, 0xb0, 0x93, 0x46, 0x46, 0x6a, 0x29, 0xde, 0x57, 0x45, 0xfc, 0xb1, 0x18, 0xfb, 0x41, 0xa3,
        0xdd, 0xc5, 0x72, 0xf4, 0x39, 0x7d, 0xa9, 0xd8, 0x7a, 0xde, 0x60, 0xea, 0x80, 0x76, 0x9d, 0x84,
        0x2c, 0x2f, 0xe9, 0xff, 0x84, 0x87, 0x98, 0x5c, 0xfb, 0x17, 0xeb, 0x23, 0x1d, 0x6b, 0x9b, 0x9f,
        0xfb, 0x2f, 0xaf, 0x87, 0xd0, 0xf4, 0x88, 0xce, 0x10, 0xce, 0xb3, 0x1d, 0x83, 0x6c, 0x74, 0x2d,
        0xd2, 0xe4, 0x1f, 0xdc, 0xb0, 0xeb, 0x10, 0xb1, 0x39, 0xbb, 0xa9, 0x91, 0xeb, 0x98, 0x97, 0x92,
        0x69, 0x92, 0xd1, 0x5c, 0x41, 0xfc, 0x04, 0xf9, 0xd4, 0x41, 0x33, 0x78, 0x85, 0xe5, 0xfb, 0xe3,
        0xd9, 0x2c, 0xb3, 0x3f, 0x22, 0xe1, 0x15, 0xd8, 0xd2, 0xef, 0x7e, 0x61, 0xbc, 0xa6, 0xa8, 0xec,
        0x39, 0x6f, 0xc6, 0x31, 0x8f, 0x9e, 0x6c, 0x2f, 0x28, 0x5a, 0x47, 0xee, 0xf6, 0xde, 0x26, 0x59,
        0x51, 0x65, 0x8e, 0x2a, 0xfa, 0xd3, 0x9c, 0xa9, 0x79, 0x50, 0x45, 0xdf, 0x50, 0x2e, 0x85, 0x88,
        0xe4, 0xc0, 0x2f, 0x24, 0xac, 0xf1, 0x70, 0x01, 0x8f, 0xa6, 0xf8, 0xe6, 0xe1, 0x0b, 0x5d, 0x53,
        0xbf, 0x3b, 0xdf, 0xb7, 0x80, 0x54, 0x26, 0x9c, 0xd8, 0xf2, 0xa6, 0x83, 0xcc, 0xd0, 0x47, 0xec,
        0x9c, 0x27, 0x18, 0x47, 0x5b, 0x23, 0x0b, 0x8f, 0x6d, 0x64, 0x66, 0x9c, 0xce, 0x41, 0xf5, 0x6a,
        0x61, 0xcc, 0x8c, 0xa8, 0x73, 0xef, 0x22, 0x03, 0xc2, 0x1d, 0xd6, 0x35, 0x7b, 0x70, 0x99, 0xf7,
        0xf7, 0x11, 0x49, 0x86, 0x1d, 0xdf, 0x78, 0xbc, 0x19, 0x8c, 0x86, 0xc1, 0xb0, 0x26, 0x9a, 0x9d,
        0x71, 0x1f, 0xa8, 0xa7, 0x82, 0xe0, 0x2f, 0xbf, 0xb0, 0x34, 0x92, 0x4c, 0x87, 0x6f, 0xea, 0x98,
        0x39, 0x0e, 0xdd, 0xa9, 0x62, 0x94, 0x80, 0x23, 0x9f, 0x96, 0xb8, 0xb2, 0xe8, 0xb8, 0xe5, 0xbb,
        0x28, 0xa6, 0x08, 0xbf, 0x17, 0xee, 0x6a, 0x46, 0x13, 0x2d, 0xe5, 0x2c, 0xca, 0xd9, 0x0f, 0xb0,
        0x46, 0xf8, 0x52, 0x73, 0x1f, 0x50, 0xdf, 0x68, 0x80, 0x1a, 0x63, 0x39, 0xda, 0xc9, 0x33, 0xe1,
        0x6d, 0x68, 0x71, 0x6d, 0x37, 0xb3, 0x24, 0x1c, 0xd1, 0x8b, 0xaa, 0x99, 0xea, 0xd9, 0x45, 0x8b,
        0x43, 0xb2, 0xcd, 0x0e, 0x9b, 0x73, 0x63, 0x4f, 0x49, 0x6d, 0x76, 0x2f, 0xfe, 0xb3, 0xe2, 0x96,
        0x3e, 0xff, 0x75, 0x11, 0xbf, 0xce, 0xff, 0xcb, 0xa8, 0x95, 0x9d, 0x54, 0x17, 0xa0, 0xe3, 0x29,
        0xbd, 0xff, 0xa6, 0xe4, 0x77, 0x1f, 0xf0, 0x9b, 0xd1, 0x2d, 0x57, 0x36, 0xa7, 0x56, 0xdc, 0x97,
        0xef, 0xa7, 0x6b, 0x74, 0x6a, 0x52, 0x18, 0x93, 0x70, 0x1a, 0xb3, 0xb4, 0xc9, 0xe2, 0x2d, 0x87,
        0xf0, 0x90, 0x28, 0xc2, 0x60, 0x04, 0x7b, 0x61, 0xe6, 0xcc, 0x54, 0x47, 0xba, 0x2c, 0x7e, 0x6c,
        0x87, 0x9e, 0xba, 0x0d, 0x15, 0x76, 0x66, 0x57, 0xcc, 0x21, 0x91, 0xe3, 0x50, 0xc5, 0x91, 0xbe,
        0x69, 0xac, 0x0b, 0x13, 0x8f, 0x2c, 0xa9, 0x40, 0x9b, 0x0b, 0x49, 0xba, 0xab, 0xb6, 0x81, 0x97,
        0x21, 0xf4, 0x72, 0x12, 0x4b, 0x15, 0xd7, 0xf8, 0xa9, 0x03, 0x4c, 0xd1, 0x1e, 0xcb, 0xc8, 0x95,
        0xe7, 0x63, 0x35, 0x93, 0xae, 0x40, 0x56, 0xb1, 0x28, 0x28, 0x1f, 0x49, 0x99, 0xc1, 0x75, 0xe2,
        0x90, 0xf8, 0x9a, 0x64, 0x06, 0x35, 0x83, 0x77, 0xe1, 0x48, 0x32, 0xc4, 0xed, 0xf2, 0x85, 0x2e,
        0x5c, 0xb9, 0x8e, 0xb5, 0x4a, 0xb9, 0x86, 0xe4, 0x55, 0xd5, 0x23, 0x85, 0xc8, 0x02, 0x75, 0x00,
        0xdd, 0x7f, 0xab, 0xdc, 0xec, 0x5a, 0x92, 0x85, 0x33, 0x66, 0x2d, 0x4c, 0xa9, 0xe9, 0x0b, 0x3e,
        0x50, 0x8c, 0xd5, 0x3d, 0x3d, 0xf4, 0xfc, 0x4e, 0xe9, 0xac, 0x8e, 0x4a, 0xcb, 0x40, 0xb3, 0xdc,
        0x96, 0x9f, 0xfc, 0x28, 0xe8, 0xd2, 0x35, 0x4d, 0xec, 0x44, 0x4b, 0x54, 0xe6, 0x30, 0xd8, 0x67,
        0x5b, 0xcd, 0x4a, 0x50, 0x72, 0xc7, 0x5b, 0xc7, 0x1b, 0x88, 0x35, 0x26, 0x9f, 0x07, 0x9a, 0x74,
        0xca, 0x94, 0x8e, 0x3b, 0x43, 0x0a, 0x19, 0x17, 0x8e, 0x8d, 0x2c, 0x5d, 0x1c, 0x90, 0xb1, 0x81,
        0x1e, 0xd0, 0xa9, 0x79, 0x78, 0xf6, 0x9b, 0xb0, 0x13, 0x81, 0x2d, 0xc7, 0x16, 0xe2, 0x05, 0x75,
        0x8f, 0xf6, 0xe3, 0x65, 0x00, 0x33, 0xc5, 0x50, 0xf3, 0x34, 0xbc, 0x8e, 0x56, 0x83, 0xea, 0x4d,
        0xc7, 0x83, 0x9e, 0x3d, 0x70, 0x61, 0x96, 0x9d, 0x29, 0xa7, 0x8d, 0x58, 0x57, 0xa5, 0x73, 0x34,
        0x56, 0x00, 0x17, 0x08, 0x53, 0xf6, 0x53, 0x38, 0x02, 0x3e, 0xd6, 0x00, 0x2b, 0x09, 0x35, 0x30,
        0x1f, 0x44, 0x97, 0x55, 0xbd, 0xd0, 0xf7, 0x82, 0x72, 0x0f, 0x26, 0xea, 0xcc, 0x4d, 0xe6, 0xa9,
        0xa6, 0x2a, 0x27, 0xfe, 0x62, 0x7b, 0x4f, 0x2d, 0xc2, 0x7e, 0x89, 0x0f, 0xc4, 0x51, 0x75, 0xfc,
        0x4c, 0x42, 0xaf, 0x6e, 0x4c, 0x26, 0xc3, 0x71, 0x7e, 0xb9, 0xc5, 0x60, 0x3a, 0x6a, 0x32, 0x44,
        0xeb, 0x49, 0x73, 0xd0, 0x9f, 0xa6, 0x59, 0xb3, 0xca, 0xda, 0x41, 0x32, 0x8f, 0x3b, 0x59, 0xde,
        0xe8, 0x70, 0xb0, 0x59, 0x55, 0xa5, 0xe2, 0x48, 0x7b, 0x24, 0xf9, 0xe6, 0xbd, 0x0e, 0x25, 0xca,
        0x4e, 0xa2, 0x57, 0x7f, 0xc2, 0xde, 0xd1, 0x8e, 0xc4, 0x6f, 0xf1, 0x40, 0xfe, 0xd8, 0xc3, 0xd6,
        0x1d, 0x3e, 0xb6, 0x0b, 0x7c, 0x9c, 0x36, 0xe6, 0x9d, 0x98, 0xf8, 0x94, 0xb9, 0xd8, 0xa0, 0x28,
        0x29, 0x6a, 0x1f, 0xe4, 0x9e, 0xd5, 0x40, 0x05, 0x2c, 0x2c, 0x2a, 0xe2, 0x45, 0x84, 0x7b, 0x27,
        0x83, 0xd8, 0x54, 0xa8, 0x49, 0xe6, 0xb9, 0x7e, 0xc4, 0xb8, 0x36, 0xfc, 0x6b, 0xbf, 0x68, 0xc6,
        0x21, 0x84, 0x7f, 0xa5, 0x21, 0xa5, 0x94, 0xfc, 0xe9, 0xb3, 0x8c, 0xe8, 0x15, 0xc2, 0xec, 0xd5,
        0x82, 0x9b, 0x14, 0xf5, 0x0b, 0x5b, 0xca, 0xa4, 0x6f, 0x9d, 0x04, 0x3d, 0x41, 0x88, 0x09, 0xa3,
        0x27, 0x7c, 0x3a, 0x56, 0x37, 0xd4, 0x97, 0x9c, 0x0b, 0x97, 0xd6, 0x2c, 0x17, 0xda, 0x6a, 0x08,
        0x15, 0x14, 0x6d, 0xf4, 0x0f, 0xe9, 0x46, 0x7d, 0xf9, 0x13, 0x98, 0x85, 0xdb, 0xcc, 0x85, 0xdd,
        0xd0, 0x10, 0xb3, 0xf2, 0x1b, 0xb7, 0xa9, 0x3f, 0x54, 0x27, 0xa8, 0xee, 0xf5, 0x02, 0xd4, 0xdf,
        0xa6, 0x29, 0xe9, 0x18, 0xad, 0x28, 0x06, 0x1a, 0x9a, 0xc3, 0xc7, 0xea, 0xd2, 0xc8, 0x42, 0x68,
        0x7f, 0xa2, 0xd8, 0x25, 0x96, 0xce, 0xb6, 0x8c, 0x35, 0xfe, 0xa5, 0xcd, 0x8c, 0x85, 0x3d, 0x8e,
        0x57, 0xcb, 0xec, 0x6b, 0x2f, 0xe7, 0xd0, 0x4d, 0xc3, 0xfc, 0x65, 0x9e, 0x71, 0xe1, 0x34, 0xc2,
        0xff, 0x7b, 0x96, 0x6f, 0x0e, 0xc5, 0xb1, 0x45, 0xf5, 0x57, 0x6b, 0x9d, 0x48, 0x1e, 0x13, 0x1b,
        0xee, 0x19, 0x0a, 0x50, 0xc5, 0xd1, 0xab, 0xfc, 0x19, 0x4a, 0xa7, 0x36, 0x59, 0x82, 0x3a, 0xbd,
        0x76, 0x1b, 0x8e, 0xf9, 0x8c, 0x01, 0x53, 0xca, 0x8f, 0xbd, 0x44, 0x16, 0xac, 0x4b, 0x46, 0x01,
        0xf9, 0x69, 0x5c, 0xe7, 0xed, 0x5e, 0x54, 0x7f, 0x02, 0xd6, 0xb1, 0x63, 0x96, 0xf2, 0xa0, 0xa4,
        0x71, 0x1c, 0x80, 0xc1, 0xc1, 0x6b, 0x4c, 0x07, 0x30, 0x94, 0x5f, 0xdd, 0x04, 0xa4, 0x7d, 0xa9,
        0xe3, 0x8b, 0xdc, 0xe7, 0xd8, 0x95, 0x91, 0xe1, 0xac, 0x08, 0x4d, 0x9a, 0xba, 0x88, 0x16, 0x9d,
        0xc6, 0xba, 0x61, 0xbe, 0x29, 0x28, 0x30, 0x85, 0x65, 0xbe, 0x9f, 0x24, 0x63, 0xe3, 0x68, 0xd5,
    ];


}
